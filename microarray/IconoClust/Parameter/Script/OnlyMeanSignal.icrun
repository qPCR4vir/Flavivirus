<?xml version='1.0' encoding='ISO-8859-1'?>
<PROCESS owner="" password="d41d8cd98f00b204e9800998ecf8427e" script="CCT._Description = {
&quot;Author&quot; : 	&quot;Clondiag Chip Technologies&quot;,
&quot;Target&quot; : 	&quot;Processing of Standard Array Tube Experiments&quot;,
&quot;Description&quot; : 	&apos;&apos;&apos;
		Script processes last image in experiment.
		The Results are graphed in a special Presentation Component.
		Model-based Segmentation is optional.
		Automatic Reference System Recognition is optional.
		Results can be normalized by named substance value.&apos;&apos;&apos;,
&quot;Parameter&quot; : 	&apos;&apos;&apos;
		icprm_spot_color:		DARK or BRIGHT
		icprm_mode:		0 for fixed segmentation according to layout
					1 for Model-based Segmentation
		icprm_ref_mode:		MANUAL for manual setting of Reference Points
					AUTO for Automatic Reference System Detection
					AUTO_CHROME for Automatic Chrome Reference System Detection
		icprm_silent:		0 for enabling user interaction
					1 for suppressing user interaction
		icprm_subst_norm:	Name of normalizing substance
					If empty the name will be entered in a dialog
		icprm_conf_ind:		determine Confidence Index (CI)
					A spot is set invalid if CI &lt; 0.75 and Signal &gt; 0.1
		icprm_signal:		0 for Signal = Local Background - Mean              [Bkg_Mean]
					1 for Signal = 1 - Mean / Local Background (only allowed for colorimetric detection)   [One_MeanDivBkg]

		icprm_save_segimage:	GENERIC_NAME

		&apos;&apos;&apos;,


&quot;Version&quot; : 	&quot;3.1r2&quot;,
&quot;ScriptVersion&quot; : &quot;2014-06-11&quot;
}

print &quot;---  Script adapted  by Ariel Vina Rodriguez !!!!!!!!!!   &quot;
print &quot;Signal changed from 1 to 0 ?? 1: = 1 - Mean / Local Background &quot;
print &quot; or to 0:  = Local Background - Mean &quot;

BRIGHT = 1     	# color
DARK = 2

MANUAL = 0		# Reference mode
AUTO = 1
AUTO_CHROME = 2

Bkg_Mean = 0		# Signal
One_MeanDivBkg = 1

Not_SILENT = False	# user interaction
SILENT = True

__ICPRM__ = { &quot;icprm_spot_color&quot;:	DARK,	
		&quot;icprm_mode&quot;: 		&quot;1&quot;,
		&quot;icprm_ref_mode&quot;:	AUTO_CHROME,
		&quot;icprm_silent&quot;:		True,
		&quot;icprm_subst_norm&quot;:	&quot;&apos;&apos;&quot;,	
		&quot;icprm_conf_ind&quot;:		&quot;1&quot;,	
		&quot;icprm_signal&quot;:		One_MeanDivBkg,
		&quot;icprm_save_segimage&quot;:	False,
		}

__SpotAligning = 1


		#TOM:PROFILING block start
import time
tStart = time.time()
		#TOM:PROFILING block end 

import win32gui

images = CCT.GetSortedImageIDs()
curr_image = CCT.GetCurrentImage()


if icprm_mode:		 # ??? just elimine 1 (AUTO)
	mode = AUTO_CHROME    #2
else:
	mode = MANUAL         #0


	# only allow model-based segmentation or fixed ROI
ref_mode = icprm_ref_mode

	# the equation 1 - Mean / BG is only allowed for colorimetric detection
if ( icprm_spot_color == BRIGHT ) and ( icprm_signal == One_MeanDivBkg ):
	verified_icprm_signal = Bkg_Mean
else:
	verified_icprm_signal = icprm_signal

import ATProcess

img_supp = ImageSupport.ImageSupport()
	
if icprm_conf_ind == 1:
		import Confidence
	
if icprm_spot_color == BRIGHT:
		hist_par_spot = ( 0.7, 1.0 )
		hist_par_back = ( 0.0, 0.3 )
else:
		hist_par_back = ( 0.7, 1.0 )
		hist_par_spot = ( 0.0, 0.3 )
	
for curr_image in images:
	__SpotAligning = 1

		# use last image --- for what?? align only? for Reference ?!
	image = curr_image  # images[-1]
	CCT.CommitImages( image )
	size = img_supp.GetPictureDimensions( image )
	img_supp.SetWindow( ( 5, 5, size[0] - 6, size[1] - 6 ), image )
	print &quot;---  Reference (last) picture commited&quot;
	
	if ref_mode:		# not MANUAL ?!
		if icprm_spot_color == BRIGHT:
			icono.SnakeSetColorBackground( DARK )
		else:
			icono.SnakeSetColorBackground( BRIGHT )
		if ref_mode == AUTO:
			icono.SnakeSetInvalidTestScene( 2 )
			icono.SnakeSetAllowedInvalidTestScene( 0.0 )
			processor = ATProcess.Processor( mode, 1 )
			  # criterion is maximum contrast, consider homogenity, favour larger scale
			mode_law = 5 | 256 | 512
			icono.SnakeSetSigmaConstraint( 0.2 )
		elif ref_mode == AUTO_CHROME:
			  # do not preprocess image for ref detection
			processor = ATProcess.Processor( mode, 0 )
			  # criterion is mean extremum, do not consider homogenity, do not favour any scale
			mode_law = 8
			icono.SnakeSetSigmaConstraint( 1.0 )
			  #icono.SnakeSetShowRng( 1 )
		ref_id = processor.ProcessRefImage( image ) 
		ref_param = { &quot;image_ref&quot;: ref_id,
			       &quot;mode_law&quot;: mode_law,
			       &quot;trans_opt&quot;: ( 0.05, 0.03, 0.15, 0.14, 0.14, 1.0, 1.0 ),
			       &quot;param_opt&quot;: ( 25.0, 0.8, 5000.0, 5000.0, 0.0, 0.0005, 0.0, 0.01 ),
			       &quot;weight_probes&quot;: 0.0
			    } 
		ref_auto = 1
		print &quot;---  Processed RefImage&quot;
	else:
		processor = ATProcess.Processor( mode, 0 )
		ref_param = {}
		ref_auto = 0
	
		#first determine the reference system and outer spots
	CCT.RunAlignment( img = image, mode = 0, 
		    param = { &quot;Transformation&quot;: ( ref_auto, ( 0.05, ), ref_param ) } )
	
	print &quot;---  Aligned RefImage&quot;
	
	if mode == AUTO_CHROME and icprm_spot_color == BRIGHT:		# model-based : our case!
		icono.InvertImage( image, image )
		print &quot;---  Inverted RefImage&quot;
	
	
	parameter = { &quot;Thresholding&quot;: ( 4, ( 0.7, 0.0, 0.0, 0.2, 0.2, 1.0, 1.0 ) ),
			&quot;Segmentation&quot;: ( 0, ( 200.0, 0.3, 2500.0, 2500.0, 1.0, 0.00001, 0.0, 0.001 ) ) }
	
	if icprm_conf_ind != 1:
		# wird bei Confidence nochmal mit parameter ausgefuehrt
		try:
			#now determine the spots
			img_id = processor.ProcessImage( image ) 
			CCT.RunAlignment( img = img_id, trans = 0, mode = mode, callSource = CODE,
					    param = parameter )
		finally:
			if mode == AUTO_CHROME and icprm_spot_color == BRIGHT:		#model-based
				icono.InvertImage( image, image )
	
	if CCT.vb_control:
		CCT.vb_control.SetModeShowROI( &quot;ROI_FILLED&quot; )
		CCT.vb_control.SetOpacityShowROI( 20 )
		print &quot;CCT.vb_control true&quot;
		print CCT.vb_control #.toString()
	
	
		#TOM:PROFILING block start
	print &quot;SpotAligning:: ENDE&quot;, time.time() - tStart
		#TOM:PROFILING block end 
	
	
	__SpotAligning = 0
	
	__DetFeatures = 1
	
	print 	&quot;after cycle: __SpotAligning=&quot;, __SpotAligning, &quot; ; __DetFeatures=&quot;,__DetFeatures  

	
	image = curr_image  # CCT.GetCurrentImage()
	
	if icprm_conf_ind == 1:
		img_id = processor.ProcessImage( image )
		checker = Confidence.ConfidenceChecker( img_id, image, colour = icprm_spot_color )
		checker.SetEnviron( CCT )
		ci_results = checker.Check( parameter, set = { &apos;bg&apos;: { &apos;on&apos;: 0 } }, signal = verified_icprm_signal )
	
	
		#TOM:PROFILING block start
	print &quot;After Confidence&quot;, time.time() - tStart	# cprm_ darf nich clartext in string
		#TOM:PROFILING block end 
	
	
	back_hist = CCT.DetermineFeatures( image,  ( &quot;Mean&quot;,  ),
						    REGION_BACK|REGION_HIST, ( 3.0, -3.0, 0.0, 1.0, 0.0 ),
						    hist_param = hist_par_back )
	print &quot; --- back_hist DetermineFeatures Mean&quot;
	
	CCT.DetermineFeatures( image, ( &quot;Mean&quot;,  ), REGION_HIST, hist_param =  hist_par_spot )
	print &quot; ---   DetermineFeatures Mean&quot;
	
	len_list = len(CCT.features[&quot;Mean&quot;])
	
	
	if icprm_spot_color == DARK:
		if verified_icprm_signal == Bkg_Mean:
			CCT.features[&quot;Signal&quot;] = [( back_hist[&quot;Mean&quot;][i] - CCT.features[&quot;Mean&quot;][i] ) for i in xrange( len_list ) ]
	
		elif verified_icprm_signal == One_MeanDivBkg:
			CCT.features[&quot;Signal&quot;] = [0 for i in xrange( len_list ) ]
			for i in xrange( len_list ):
				try:
					CCT.features[&quot;Signal&quot;][i] = 241.0 / 256.0 * ( 1 - CCT.features[&quot;Mean&quot;][i] / back_hist[&quot;Mean&quot;][i] )
				except:
					pass
	elif icprm_spot_color == BRIGHT:
		if verified_icprm_signal == Bkg_Mean:
			CCT.features[&quot;Signal&quot;] = [( CCT.features[&quot;Mean&quot;][i] - back_hist[&quot;Mean&quot;][i]) for i in xrange( len_list ) ]
	
	print &quot; ---   Signals calculated&quot;
	
	CCT.features[&quot;Background&quot;] = [back_hist[&quot;Mean&quot;][i] for i in xrange( len_list ) ]
	print &quot; ---   Backgrounds calculated&quot;
	
	if icprm_conf_ind == One_MeanDivBkg:
		for ci_key, ci_list in ci_results.iteritems():
			CCT.features[ci_key] = [ci_list[i] for i in xrange( len( ci_list ) ) ]
	
	valid = CCT.features[&apos;Valid&apos;]         # --------   Seted: CCT.features[&apos;Valid&apos;]
	
		#TOM:PROFILING block start
	print &quot;Vor Seg Img&quot;, time.time() - tStart
		#TOM:PROFILING block end 
	
	
	#---------------------------------------------------------------
	# save segmentation image 
	#---------------------------------------------------------------
	try:
		seg_name = CCT.segImageName
	except:
		seg_name = &quot;&quot;
	if icprm_save_segimage == 2:
		seg_name = CCT.GetImageName(image) #+ name noch bearbeiten
	
	if seg_name:
		ic_img_path = seg_name + &quot;.png&quot; 
		print &quot;save segmentation image to&quot;, ic_img_path
		CCT.SaveSegImage( ic_img_path, mode = ImageSupport.CCT_ROI, opac = 1.0, add_valid = 1 )
	
	#-----------------------------------------------------------------------------
	print &quot;After Seg Img&quot;, time.time() - tStart
	
	
	
	if CCT.vb_control:
		CCT.vb_control.ShowResults( 1 )
		print &quot; ---  Results showed&quot;
		if not icprm_silent:
			answer = win32gui.MessageBox( 0, &apos;You can set invalid Spots now.&apos; + chr( 13 ) + \
				&apos;Press &quot;Ok&quot; if you are done.&apos;, &apos;Spot Validity&apos;, 5168 )
			valid = CCT.vb_control.GetValidity() # Reset manualy: CCT.features[&apos;Valid&apos;]
			CCT.features[&apos;Valid&apos;] = valid
	
	valid_indx = []
	for i in xrange( len( valid ) ):
		if valid[i] == 0:
			valid_indx.append( i ) 
	
	
	if not CCT.features.has_key( &quot;Substance&quot; ):
		raise KeyError, &quot;You have to include Spot Descriptions into your Experiment&quot;
	print &quot;---- After Substance...&quot;
	CCT.featSubst = []
	for subst in CCT.features[&quot;Substance&quot;]:
		try:
			pos = CCT.featSubst.index( subst )
		except:
			CCT.featSubst.append( subst )
	print &quot;---- After Substance 2...&quot;
	
	CCT.featSubst.sort()
	
	normSubst = &quot;Biotin-Marke_2,5µM&quot;   # = &quot;&quot;
	if not icprm_subst_norm:
		if not icprm_silent:
			# create dialog and ask for normalizing substance.  I need this ???
			from win32com.client import Dispatch
			util = Dispatch( &quot;IconoUtil.Util&quot; )
			normSubst = util.ListSelectEx( &quot;Normalizing Substance&quot;, &quot;Select name of normalizing substance&quot;, &quot;Select&quot;, CCT.featSubst[:], &quot;norm_subst&quot; )
			normSubst = normSubst.strip()
	
	CCT.features[&apos;Valid&apos;] = valid

	if normSubst:
		# normalize features
		feat_norm = ( &quot;Signal&quot;,)# &quot;Mean&quot;, &quot;Background&quot;, )
		normFeat = {}
		nFeatMax = {}
		for feat in feat_norm:
			normFeat[feat] = 0.0
			nFeatMax[feat] = 0.0
		norm_count = 0
		for i in xrange( len( CCT.features[&quot;Substance&quot;] ) ):
			if valid[i]:
				continue
			subst = CCT.features[&quot;Substance&quot;][i]
			if subst != normSubst:
				for feat in feat_norm:				#new
					if nFeatMax[feat]&lt;CCT.features[feat][i]:	#new
						nFeatMax[feat]=CCT.features[feat][i]	#new
				continue
			norm_count += 1
			for feat in feat_norm:
				normFeat[feat] += CCT.features[feat][i]
		if not norm_count:
			raise ValueError( &quot;Cannot normalize - no valid spot for substance&quot; )
		for feat in feat_norm:
			if normFeat[feat]:
				normFeat[feat] /= norm_count
				if normFeat[feat]*0.2&gt;nFeatMax[feat]:
					nFeatMax[feat]=normFeat[feat] 
				#CCT.features[feat] = [ val / normFeat[feat] for val in CCT.features[feat] ]
				CCT.features[feat] = [ val / nFeatMax[feat] for val in CCT.features[feat] ]
	
	print &quot; ---- Normalized ...&quot;
	if False: #not CCT.sources.has_key( &quot;subst_match&quot; ):    ???????????
		print &quot; have to create file with all the substances without any relations&quot;
		# name it after the a_probe_on_array file 
		name_match = os.path.basename( CCT.sources[&quot;a_probe_on_array&quot;] )
		name_match = os.path.splitext( name_match )[0] + &quot;.txt&quot;
		name_match = os.path.join( ParamGlobals.GetIconoPath(), &quot;Parameter&quot;, &quot;Layout&quot;, &quot;Substance&quot;, name_match ) 
		cont_match = &quot;Match\tSubstance\n&quot;
		subst_in = []
		for subst in CCT.features[&quot;Substance&quot;]:
			if not subst in subst_in:
				cont_match += subst + &apos;\t&apos; + subst + &apos;\n&apos;
				subst_in.append( subst )
		print &quot;--- Creating file &quot;, name_match  
		#f = open( name_match, &quot;w&quot; )
		#f.write( cont_match )
		#f.close()
		import Excel2XMLSubstance
		conv = Excel2XMLSubstance.xl2XML()
		conv.ImportText( name_match )
		name_match = conv.Create()
		CCT.SetParameterSingle( [ ( &quot;subst_match&quot;, name_match ), ] )

	# create a dictionary with key value pair: substancename, value
	# presentation only creates the mean of the values per substance
	subst_list = CCT.features[&quot;Substance&quot;]
	SigMeans = {}
	for subst in subst_list:
		SigMeans[ subst ] = []
	for idx in valid_indx:
		SigMeans[ subst_list[idx] ].append( CCT.features[&quot;Signal&quot;][idx] ) 

	print &quot;---- SigMeans created&quot;
	sig = [ len(SigMeans[ subst ]) and 
               sum(SigMeans[ subst ])/len(SigMeans[ subst ]) for subst  in subst_list  ]
	print &quot;---- SigMeans created 2&quot;

	CCT.validFeat = { 	&quot;Signal&quot;: 	sig,
				&quot;Valid&quot;:		[ 0.0 for s  in subst_list  ],
				&quot;Substance&quot;:	[ s for s  in subst_list  ] }
	print &quot;--- valid feat calculed&quot;
	
	if CCT.vb_control:
		import PresentEnvironAT
		CCT.PresentAT = PresentEnvironAT.PresentEnviron()
		CCT.PresentAT.SetSignalFeature( &quot;Signal&quot; )
		CCT.PresentAT.SetEnviron( CCT, [ CCT.validFeat, ] )
		CCT.PresentAT.SetMode( nr_img = 0, show_img = PresentEnvironAT.ENDPOINT )
		CCT.vb_control.SetPresentation( &quot;PresentAT&quot; )
	
	if verified_icprm_signal == 1:
		CCT.rawResultType = &quot;ic [1MeanBG]&quot;
	elif verified_icprm_signal == 0:
		CCT.rawResultType = &quot;ic [MeanBG]&quot;
	
	# make available parameter
	CCT.paramProcessing = {}
	if seg_name:
		CCT.paramProcessing[&quot;segPath&quot;] = seg_name
	
	#TOM:PROFILING block start
	print &quot;Ende script&quot;, time.time() - tStart
	#TOM:PROFILING block end 
	
	__DetFeatures = 0
	
" />