<?xml version='1.0' encoding='ISO-8859-1'?>
<PROCESS owner="" password="d41d8cd98f00b204e9800998ecf8427e" script="CCT._Description = {
&quot;Author&quot; : 	&quot;Clondiag Chip Technologies. Script adapted  by Ariel Vina Rodriguez at FLI.&quot;,
&quot;Target&quot; : 	&quot;Processing of Stript Array Experiments&quot;,
&quot;Description&quot; : 	&apos;&apos;&apos;
		Script processes all images in experiment (and export results in the seleted format) 
		or processes only the selected image and  the Results are graphed in a special Presentation Component.
		Model-based Segmentation is optional.
		Automatic Reference System Recognition is optional.
		Results are normalized by the biggest signal, if bigger than 20% of the Biotin-Marke_2,5µM probe mean signal.
                                     See: https://github.com/qPCR4vir/Flavivirus/tree/master/microarray/icono_clust_scripts
                                               https://github.com/qPCR4vir/Flavivirus/tree/master/microarray/orange
                                               http://orange.biolab.si/
                                               http://orange.biolab.si/orange2/
                                         &apos;&apos;&apos;,
&quot;Parameter&quot; : 	&apos;&apos;&apos;
		icprm_only_current_image:  True/False : what images to process. If only the current, no result will be export, but will be shown.
		icprm_export_orange            True/False  : Export all Exp.signal data to be use in Orange. http://orange.biolab.si/
		icprm_export_csv                    True/False  : Export all Exp.signal data (for example to Excel)
		icprm_normalize:		NONE   		= 0  	
					SUBST_NORM  	= 1 
					RANGE 		= 2
					 EXEPT_SN 	= 3
		icprm_subst_norm:	Name of normalizing substance. For example:   &quot;Biotin-Marke_2,5µM&quot;
					If empty the name will be entered in a dialog if silent is set to False
		icprm_signal:		Bkg_Mean                 = 0     for Signal = Local Background - Mean               
					One_MeanDivBkg  = 1     for Signal = 1 - Mean / Local Background (only allowed for colorimetric detection)   
		icprm_silent:		 False for enabling user interaction  : NOT IMPLEMENTED
					True for suppressing user interaction
		icprm_conf_ind:		determine Confidence Index (CI)
					A spot is set invalid if CI &lt; 0.75 and Signal &gt; 0.1
		icprm_save_segimage:	GENERIC_NAME		??
		icprm_spot_color:		DARK or BRIGHT
		icprm_mode:		FIXED      = 0 for fixed segmentation according to layout
					MODE     = 1 for Model-based Segmentation
		icprm_ref_mode:		MANUAL         for manual setting of Reference Points
					AUTO               for Automatic Reference System Detection  : NOT IMPLEMENTED, default to AUTO_CHROME
					AUTO_CHROME for Automatic Chrome Reference System Detection
		&apos;&apos;&apos;,
&quot;Version&quot; : 	&quot;3.2r1&quot;,
&quot;ScriptVersion&quot; : &quot;2016-07-21&quot;
}

print &quot;---  Atention: Script adapted (by Ariel Vina Rodriguez, at INNT-FLI) !   &quot; 

FIXED = 0		# Segmentation mode 
MODE = 1

NONE = 0  		# icprm_normalize:		
SUBST_NORM = 1 
RANGE = 2
EXEPT_SN = 3


BRIGHT = 1     	# color
DARK = 2

MANUAL = 0		# Reference mode
AUTO = 1
AUTO_CHROME = 2

Bkg_Mean = 0		# Signal
One_MeanDivBkg = 1

Not_SILENT = False	# user interaction
SILENT = True


__ICPRM__ = { &quot;icprm_spot_color&quot;:	&quot;DARK&quot;,	
		&quot;icprm_only_current_image&quot;: &quot;False&quot;,
		&quot;icprm_export_csv&quot;: 	&quot;False&quot;,
		&quot;icprm_export_orange&quot;: 	&quot;True&quot;,
		&quot;icprm_normalize&quot;:	&quot;EXEPT_SN&quot;,	
		&quot;icprm_mode&quot;: 		&quot;MODE&quot;,
		&quot;icprm_ref_mode&quot;:	&quot;AUTO_CHROME&quot;,
		&quot;icprm_silent&quot;:		&quot;True&quot;,
		&quot;icprm_subst_norm&quot;:	&quot;&apos;Biotin-Marke_2,5µM&apos;&quot;,	
		&quot;icprm_conf_ind&quot;:		&quot;1&quot;,	
		&quot;icprm_signal&quot;:		&quot;One_MeanDivBkg&quot;,
		&quot;icprm_save_segimage&quot;:	&quot;False&quot;,
		}

print &quot;Signal changed from 1 to 0 ?? 1: = 1 - Mean / Local Background &quot;
print &quot; or to 0:  = Local Background - Mean &quot;

# import time
# tStart = time.time()

table_created = False
export_orange = icprm_export_orange  	#True. Why icprm_export_orange is undefined at the end of the script?  
export_CSV    = icprm_export_csv   	#False. Why icprm_export_CSV is undefined at the end of the script?  
ExportSig     =  (export_orange  or  export_CSV) and not icprm_only_current_image 
ref_mode      = icprm_ref_mode	       # only allow model-based segmentation or fixed ROI
mode          = AUTO_CHROME if icprm_mode else MANUAL     # ???
invert        = mode == AUTO_CHROME and icprm_spot_color == BRIGHT
	                                   # the equation 1 - Mean / BG is only allowed for colorimetric detection
verified_icprm_signal = Bkg_Mean if (( icprm_spot_color == BRIGHT ) 
                                 and ( icprm_signal == One_MeanDivBkg )) else icprm_signal
if icprm_spot_color == BRIGHT:
		hist_par_spot = ( 0.7, 1.0 )
		hist_par_back = ( 0.0, 0.3 )
else:
		hist_par_back = ( 0.7, 1.0 )
		hist_par_spot = ( 0.0, 0.3 )
only_curr_image = icprm_only_current_image
images = (CCT.GetCurrentImage(),) if only_curr_image else CCT.GetSortedImageIDs()

import win32gui
import ATProcess
if icprm_conf_ind == 1:		# ??
		import Confidence

img_supp = ImageSupport.ImageSupport()


# use last image --- for what?? align only? for Reference ?!
#image = images[0] #[-1]

def CreateTables(imagePath, subst_list):
	pathExper, imageFile = os.path.split( imagePath )
	ExperName = os.path.split( pathExper )[1] 
	tables=[]

	if icprm_export_orange:
		ExtOrg,SepOrg = (&quot;.tab&quot;,&quot;\t&quot;) 
		NameOrg = ExperName + ExtOrg
		OrangeExportPath = os.path.join( ParamGlobals.GetIconoPath(), &quot;Parameter&quot;, &quot;Results&quot;, NameOrg ) 
		Orange = open( OrangeExportPath, &quot;w&quot; )

		Orange.write( &quot;Sample&quot;+SepOrg )             # header
		Orange.write(SepOrg.join(subst_list))
		Orange.write( &quot;\n&quot; )

		Orange.write( &quot;string&quot;  )           # attribute type
		Orange.write( (SepOrg+&quot;continuous&quot;) * len(subst_list )   )
		Orange.write( &quot;\n&quot; )
				
		Orange.write( &quot;meta&quot;  )		# meta information
		Orange.write( SepOrg * len( subst_list )  )
		Orange.write( &quot;\n&quot; )
		tables.append( (Orange,SepOrg,&quot;Orange Table_path: &quot;, OrangeExportPath) )
			
	if icprm_export_csv:
		ExtCSV,SepCSV = (&quot;.csv&quot;,&quot;\t&quot;) 
		NameCSV = ExperName + ExtCSV
		CSVExportPath = os.path.join( ParamGlobals.GetIconoPath(), &quot;Parameter&quot;, &quot;Results&quot;, NameCSV ) 
		CSV = open( CSVExportPath, &quot;w&quot; )

		CSV.write( &quot;Sample&quot;+SepCSV)             # header
		CSV.write(SepCSV.join(subst_list))
		CSV.write( &quot;\n&quot; )
		tables.append( (CSV   ,SepCSV,&quot;CSV Table_path:  &quot;  , CSVExportPath) )
	return tables
	

def SaveSegmentationImafe(CCT,image):
	#---------------------------------------------------------------
	# save segmentation image ??
	#---------------------------------------------------------------
	try:
		seg_name = CCT.segImageName
	except:
		seg_name = &quot;&quot;
	if icprm_save_segimage == 2:
		seg_name = CCT.GetImageName(image) #+ name noch bearbeiten
	
	if seg_name:
		ic_img_path = seg_name + &quot;.png&quot; 
		print &quot;Save segmentation image to: &quot;, ic_img_path
		CCT.SaveSegImage( ic_img_path, mode = ImageSupport.CCT_ROI, opac = 1.0, add_valid = 1 )
	return seg_name
	#-----------------------------------------------------------------------------


 
for image in images:

	__SpotAligning = 1							# PREprocess image
	CCT.CommitImages( image )
	size = img_supp.GetPictureDimensions( image )
	img_supp.SetWindow( ( 5, 5, size[0] - 6, size[1] - 6 ), image )
	print &quot;---  Image:&quot;,image,&quot; size: &quot;, size   #, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	
	if ref_mode:		# not MANUAL ?!
		if icprm_spot_color == BRIGHT:
			icono.SnakeSetColorBackground( DARK )
		else:
			icono.SnakeSetColorBackground( BRIGHT )

		if ref_mode == AUTO:
			icono.SnakeSetInvalidTestScene( 2 )
			icono.SnakeSetAllowedInvalidTestScene( 0.0 )
			processor = ATProcess.Processor( mode, 1 )
			  # criterion is maximum contrast, consider homogenity, favour larger scale
			mode_law = 5 | 256 | 512
			icono.SnakeSetSigmaConstraint( 0.2 )
		elif ref_mode == AUTO_CHROME:
			  # do not preprocess image for ref detection
			processor = ATProcess.Processor( mode, 0 )
			  # criterion is mean extremum, do not consider homogenity, do not favour any scale
			mode_law = 8
			icono.SnakeSetSigmaConstraint( 1.0 )


			  #icono.SnakeSetShowRng( 1 )
		ref_id = processor.ProcessRefImage( image ) 

		ref_param = { &quot;image_ref&quot;: ref_id,
			       &quot;mode_law&quot;: mode_law,
			       &quot;trans_opt&quot;: ( 0.05, 0.03, 0.15, 0.14, 0.14, 1.0, 1.0 ),
			       &quot;param_opt&quot;: ( 25.0, 0.8, 5000.0, 5000.0, 0.0, 0.0005, 0.0, 0.01 ),
			       &quot;weight_probes&quot;: 0.0
			    } 
		ref_auto = 1
		#print &quot;---  Processed RefImage&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	else:
		processor = ATProcess.Processor( mode, 0 )
		ref_param = {}
		ref_auto = 0
	

		#first determine the reference system and outer spots
	CCT.RunAlignment( img = image, mode = 0, 
		    param = { &quot;Transformation&quot;: ( ref_auto, ( 0.05, ), ref_param ) } )

	# print &quot;---  Aligned RefImage&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;

	if invert:		# model-based : our case!
		icono.InvertImage( image, image )
		#print &quot;---  Inverted RefImage&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	
	parameter = { &quot;Thresholding&quot;: ( 4, ( 0.7, 0.0, 0.0, 0.2, 0.2, 1.0, 1.0 ) ),
			&quot;Segmentation&quot;: ( 0, ( 200.0, 0.3, 2500.0, 2500.0, 1.0, 0.00001, 0.0, 0.001 ) ) }

	if icprm_conf_ind != 1:
		# wird bei Confidence nochmal mit parameter ausgefuehrt
		try:
			#now determine the spots
			img_id = processor.ProcessImage( image ) 
			CCT.RunAlignment( img = img_id, trans = 0, mode = mode, callSource = CODE,
					    param = parameter )
		finally:
			if invert:		#model-based
				icono.InvertImage( image, image )
	
	if CCT.vb_control:
		CCT.vb_control.SetModeShowROI( &quot;ROI_FILLED&quot; )
		CCT.vb_control.SetOpacityShowROI( 20 )
		#print &quot;CCT.vb_control true&quot;
		#print str(CCT.vb_control) #.toString()
	
	#print &quot;SpotAligning:: ENDE&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;        	# Preprocess image ended

	
	__DetFeatures = 1					              # Detect Features !!!!!
	__SpotAligning = 0

	if icprm_conf_ind == 1:
		img_id  = processor.ProcessImage( image )
		checker = Confidence.ConfidenceChecker( img_id, image, colour = icprm_spot_color )
		checker.SetEnviron( CCT )
		ci_results = checker.Check( parameter, set = { &apos;bg&apos;: { &apos;on&apos;: 0 } }, signal = verified_icprm_signal )
	
	#print &quot;After ConfidenceChecker&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot; # ######   cprm_ darf nich clartext in string
	
	back_hist = CCT.DetermineFeatures( image,  ( &quot;Mean&quot;,  ),
						    REGION_BACK|REGION_HIST, ( 3.0, -3.0, 0.0, 1.0, 0.0 ),
						    hist_param = hist_par_back )
	#print &quot; --- back_hist DetermineFeatures Mean&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	
	CCT.DetermineFeatures( image, ( &quot;Mean&quot;,  ), REGION_HIST, hist_param =  hist_par_spot )
	#print &quot; ---   DetermineFeatures Mean&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	
	len_list = len(CCT.features[&quot;Mean&quot;])
	
									# #### Calcule Signals  !!!!!!
	if icprm_spot_color == DARK:
		if verified_icprm_signal == Bkg_Mean:
			#CCT.features[&quot;Signal&quot;] = [( back_hist[&quot;Mean&quot;][i] - CCT.features[&quot;Mean&quot;][i] ) for i in xrange( len_list ) ]
			CCT.features[&quot;Signal&quot;] = [ Bkg-Mean for Bkg,Mean in zip(back_hist[&quot;Mean&quot;],CCT.features[&quot;Mean&quot;])]
	
		elif verified_icprm_signal == One_MeanDivBkg:
			#CCT.features[&quot;Signal&quot;] = [0 for i in xrange( len_list ) ]
			CCT.features[&quot;Signal&quot;] = [0] * len_list  
			for i in xrange( len_list ):
				try:
					CCT.features[&quot;Signal&quot;][i] = 241.0 / 256.0 * ( 1 - CCT.features[&quot;Mean&quot;][i] / back_hist[&quot;Mean&quot;][i] )
				except:
					pass
	elif icprm_spot_color == BRIGHT:
		if verified_icprm_signal == Bkg_Mean:
			CCT.features[&quot;Signal&quot;] = [( CCT.features[&quot;Mean&quot;][i] - back_hist[&quot;Mean&quot;][i]) for i in xrange( len_list ) ]
	
	#print &quot; ---   Signals calculated&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	
	CCT.features[&quot;Background&quot;] = [back_hist[&quot;Mean&quot;][i] for i in xrange( len_list ) ]
	#print &quot; ---   Backgrounds calculated&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	
	if icprm_conf_ind == One_MeanDivBkg:
		for ci_key, ci_list in ci_results.iteritems():
			CCT.features[ci_key] = [ci_list[i] for i in xrange( len( ci_list ) ) ]
	
	invalid = CCT.features[&apos;Valid&apos;]         # --------   Seted: CCT.features[&apos;Valid&apos;]
	
	#print &quot;Vor Seg Img&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	seg_name = SaveSegmentationImafe(CCT,image)	
	#print &quot;After Seg Img&quot;, time.time() - tStart
	
	
	
	if CCT.vb_control and only_curr_image:                     # Show and signal invalids
		CCT.vb_control.ShowResults( 1 )
		print &quot; ---  Results showed&quot;
		if not icprm_silent:
			answer = win32gui.MessageBox( 0, &apos;You can set invalid Spots now.&apos; + chr( 13 ) + \
				&apos;Press &quot;Ok&quot; if you are done.&apos;, &apos;Spot Validity&apos;, 5168 )
			invalid = CCT.vb_control.GetValidity() # Reset manualy: CCT.features[&apos;Valid&apos;]
			CCT.features[&apos;Valid&apos;] = invalid
	
	valid_indx = [i for i in xrange( len( invalid ) ) if not invalid[i]   ]
	
	if not CCT.features.has_key( &quot;Substance&quot; ):
		raise KeyError, &quot;You have to include Spot Descriptions into your Experiment&quot;
	#print &quot;---- After Substance...&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;

	CCT.featSubst = list(set(CCT.features[&quot;Substance&quot;]))
	CCT.featSubst.sort()
	#print &quot;---- After Substance 2...&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	
	
	normSubst = &quot;Biotin-Marke_2,5µM&quot;   # = icprm_subst_norm  &quot;&quot;
	if not icprm_subst_norm:
		if not icprm_silent:
			# create dialog and ask for normalizing substance.  I need this ???
			from win32com.client import Dispatch
			util = Dispatch( &quot;IconoUtil.Util&quot; )
			normSubst = util.ListSelectEx( &quot;Normalizing Substance&quot;, &quot;Select name of normalizing substance&quot;, &quot;Select&quot;, CCT.featSubst[:], &quot;norm_subst&quot; )
			normSubst = normSubst.strip()
	
	CCT.features[&apos;Valid&apos;] = invalid

	#	icprm_normalize:		NONE   		= 0  	
	#				SUBST_NORM  	= 1 
	#				RANGE 		= 2
	#				 EXEPT_SN 	= 3

	if normSubst and icprm_normalize:					# normalize features
		feat_norm = ( &quot;Signal&quot;,)# &quot;Mean&quot;, &quot;Background&quot;, )
		normFeat = {}
		nFeatMax = {}
		for feat in feat_norm:
			normFeat[feat] = 0.0
			nFeatMax[feat] = 0.0
		norm_count = 0
		for i in xrange( len( CCT.features[&quot;Substance&quot;] ) ):
			if invalid[i]:
				continue
			subst = CCT.features[&quot;Substance&quot;][i]
			if subst != normSubst:
				for feat in feat_norm:				#new
					if nFeatMax[feat]&lt;CCT.features[feat][i]:	#new
						nFeatMax[feat]=CCT.features[feat][i]	#new
				continue
			norm_count += 1
			for feat in feat_norm:
				normFeat[feat] += CCT.features[feat][i]
		if not norm_count:
			raise ValueError( &quot;Cannot normalize - no valid spot for substance&quot; )
		for feat in feat_norm:
			if normFeat[feat]:
				normFeat[feat] /= norm_count
				if normFeat[feat]*0.2&gt;nFeatMax[feat]:
					nFeatMax[feat]=normFeat[feat] 
				#CCT.features[feat] = [ val / normFeat[feat] for val in CCT.features[feat] ]
				CCT.features[feat] = [ val / nFeatMax[feat] for val in CCT.features[feat] ]
	
		#print &quot; ---- Normalized ...&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;

	# create a dictionary with key value pair: substancename, value
	# presentation only                          creates the mean of the values per substance

	subst_list = set(CCT.features[&quot;Substance&quot;])
	SigMeans = {}
	for subst in subst_list:
		SigMeans[ subst ] = []
	for idx in valid_indx:
		SigMeans[ CCT.features[&quot;Substance&quot;][idx] ].append( CCT.features[&quot;Signal&quot;][idx] ) 

	#subst_list.sort()
	#print &quot;---- SigMeans created&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	sig = [ len(SigMeans[ subst ]) and 
               sum(SigMeans[ subst ])/len(SigMeans[ subst ]) for subst  in subst_list  ]
	#print &quot;---- SigMeans created 2&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;

	CCT.validFeat = { &quot;Signal&quot;:    sig,
			    &quot;Valid&quot; :    [ 0.0 ] * len(subst_list ),
			    &quot;Substance&quot;: subst_list }
	#print &quot;--- valid feat calculed&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
	
	if CCT.vb_control:					# #### Graphic ????
		import PresentEnvironAT
		CCT.PresentAT = PresentEnvironAT.PresentEnviron()
		CCT.PresentAT.SetSignalFeature( &quot;Signal&quot; )
		CCT.PresentAT.SetEnviron( CCT, [ CCT.validFeat, ] )
		CCT.PresentAT.SetMode( nr_img = 0, show_img = PresentEnvironAT.ENDPOINT )
		CCT.vb_control.SetPresentation( &quot;PresentAT&quot; )
	
	if verified_icprm_signal == 1:
		CCT.rawResultType = &quot;ic [1MeanBG]&quot;
	elif verified_icprm_signal == 0:
		CCT.rawResultType = &quot;ic [MeanBG]&quot;
	
	# make available parameter
	CCT.paramProcessing = {}
	if seg_name:
		CCT.paramProcessing[&quot;segPath&quot;] = seg_name

	#print &quot;--- Before export&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;

	if ExportSig :						 # Export signals in a file
		imagePath=CCT.GetImageName(image)
		if not table_created:
			tables = CreateTables(imagePath, subst_list)
			table_created = True
		sample  =  os.path.splitext(os.path.basename( imagePath ))[0]
		print &quot;Saving data for sample: &quot;, sample
		for table, sep,n,p in tables:
 			table.write(sample)
			table.write( sep )
			table.write(sep.join(   [str(signal) for signal in sig]   ))
			table.write( &quot;\n&quot; )
	#print &quot;Ende cycle&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;

for table, s ,title,path in tables:
	table.close()
	print title,path

print &quot;Ende script&quot;, &quot; Time: &quot;,time.time() - tStart, &quot; s&quot;
print &quot;Num of images to processed = &quot;, len(images)
print &quot;---  Atention: Script adapted (by Ariel Vina Rodriguez, at INNT-FLI) !   &quot; 
__DetFeatures = 0


	
" />